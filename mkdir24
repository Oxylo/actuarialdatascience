{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Bingo! But how long will it take?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Calculate prob distribution bingo\n",
    "\"\"\"\n",
    "import mpmath as m\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from math import factorial\n",
    "\n",
    "def binomial(a, b):\n",
    "    \"\"\" Returns the binomial coefficient: number of subsets size b from population size a\n",
    "    \"\"\"\n",
    "    return factorial(a) / (factorial(a - b) * factorial(b))\n",
    "\n",
    "\n",
    "def prob(x, N=75, K=24):\n",
    "    \"\"\" Returns probabilty of having BINGO after exactly n drawings\n",
    "\n",
    "    Parameters\n",
    "    ----------\n",
    "      x : numer of drawings\n",
    "      N : total number of bingo balls\n",
    "      K : number of items on card \n",
    "    \"\"\"\n",
    "    return ((1 / (N - x + 1)) *\n",
    "            binomial(K, K - 1) *\n",
    "            binomial(N - K, x - K) /\n",
    "            binomial(N, x - 1))\n",
    "\n",
    "\n",
    "def quantile(s, q):\n",
    "    \"\"\" Return q percent quantile of series s\n",
    "\n",
    "    Parameters\n",
    "    ----------\n",
    "      s : series containing cumulative density probabilities\n",
    "      q : float specifying quantile\n",
    "    \"\"\"\n",
    "    return s[s >= q].index[0]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1%</th>\n",
       "      <th>10%</th>\n",
       "      <th>50%</th>\n",
       "      <th>90%</th>\n",
       "      <th>99%</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>nplayers</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>65</td>\n",
       "      <td>70</td>\n",
       "      <td>74</td>\n",
       "      <td>75</td>\n",
       "      <td>75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>61</td>\n",
       "      <td>66</td>\n",
       "      <td>70</td>\n",
       "      <td>73</td>\n",
       "      <td>74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>59</td>\n",
       "      <td>63</td>\n",
       "      <td>67</td>\n",
       "      <td>70</td>\n",
       "      <td>72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>57</td>\n",
       "      <td>61</td>\n",
       "      <td>65</td>\n",
       "      <td>68</td>\n",
       "      <td>69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80</th>\n",
       "      <td>56</td>\n",
       "      <td>60</td>\n",
       "      <td>64</td>\n",
       "      <td>67</td>\n",
       "      <td>68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>56</td>\n",
       "      <td>60</td>\n",
       "      <td>64</td>\n",
       "      <td>66</td>\n",
       "      <td>68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>200</th>\n",
       "      <td>54</td>\n",
       "      <td>59</td>\n",
       "      <td>62</td>\n",
       "      <td>65</td>\n",
       "      <td>66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>500</th>\n",
       "      <td>53</td>\n",
       "      <td>57</td>\n",
       "      <td>60</td>\n",
       "      <td>63</td>\n",
       "      <td>64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1000</th>\n",
       "      <td>52</td>\n",
       "      <td>56</td>\n",
       "      <td>59</td>\n",
       "      <td>61</td>\n",
       "      <td>63</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           1%  10%  50%  90%  99%\n",
       "nplayers                         \n",
       "1          65   70   74   75   75\n",
       "5          61   66   70   73   74\n",
       "20         59   63   67   70   72\n",
       "50         57   61   65   68   69\n",
       "80         56   60   64   67   68\n",
       "100        56   60   64   66   68\n",
       "200        54   59   62   65   66\n",
       "500        53   57   60   63   64\n",
       "1000       52   56   59   61   63"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "N = 75\n",
    "K = 24\n",
    "\n",
    "probs = pd.Series([prob(i) for i in range(K, N+1)], index=range(K, N+1)) \n",
    "cumprobs = probs.cumsum()\n",
    "\n",
    "percentiles = [0.01, 0.10, 0.5, 0.9, 0.99]\n",
    "players = [1, 5, 20, 50, 80, 100, 200, 500, 1000]\n",
    "\n",
    "output = []\n",
    "for nplayers in players:\n",
    "    d = {}\n",
    "    d['nplayers'] = nplayers\n",
    "    nitems = len(cumprobs)\n",
    "    cumprobs_n_players = [np.float(m.fsub(1, m.power( m.fsub(1, cumprobs.values[k], rounding='d'), nplayers), rounding='d')) \n",
    "                          for k in range(nitems)]  # uses mpmath for enough precision\n",
    "    cumprobs_n_players = pd.Series(cumprobs_n_players, index=range(K, N+1))\n",
    "\n",
    "    cumprobs_n_players = pd.Series(cumprobs_n_players)\n",
    "    for percentile in percentiles:  \n",
    "        label = '{:2.0f}%'.format(round(100 * percentile, 0))\n",
    "        d[label] = quantile(cumprobs_n_players, percentile)\n",
    "    output.append(d)\n",
    "\n",
    "outp = pd.DataFrame(output)\n",
    "outp.set_index('nplayers')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Conclusion\n",
    "Assuming 80 employees will participate, each game is likely (80% probability) to take between 60 and 67 drawings. It will be extrely likely (99% probability) that one game will take between 56 and 68 drawings. It will be extremely unlikely (0.5% probability) that the game will require more than 68 drawings from the cage to complete."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
